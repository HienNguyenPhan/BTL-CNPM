# -*- coding: utf-8 -*-
"""Chấm điểm và nhận xét Essay.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Z1Il8ofKiSR71ai3BXlJ-GukoZllfQP

# Huấn luyện mô hình dự đoán điểm số Essay
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np

df = pd.read_csv("/content/data_essay")

X = df['Essay']
y = df['Overall']

vectorizer = TfidfVectorizer()
X_vectorized = vectorizer.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_vectorized, y, test_size=0.2, random_state=42)
trained_model = LinearRegression().fit(X_train, y_train)

user_input = input("Enter your essay: ")
new_essay = user_input
# Preprocess the essay
new_essay_vectorized = vectorizer.transform([new_essay])

# Make a prediction
predicted_grade = trained_model.predict(new_essay_vectorized)

print(f"The predicted grade for the new essay is: {predicted_grade[0]}")

"""# Sử dụng API để lấy Review"""

!pip install -q -U google-generativeai
import pathlib
import textwrap

import google.generativeai as genai

# Used to securely store your API key
from google.colab import userdata

from IPython.display import display
from IPython.display import Markdown


def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

GOOGLE_API_KEY=userdata.get('gemini')

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

response = model.generate_content("Can you review the following essay based on these four catergories, Task Achievement, Coherence and Cohesion Lexical Resource, Grammatical Range and Accuracy, the review of each category should be short but precise and strict: " + user_input)

to_markdown(response.text)

"""# Ghép kết quả của cả 2 vào"""

def round_to_nearest_half(num):
    integer_part = int(num)
    decimal_part = num - integer_part

    if decimal_part <= 0.25:
        return integer_part
    elif decimal_part <= 0.75:
        return integer_part + 0.5
    else:
        return integer_part + 1
score = round_to_nearest_half(predicted_grade[0])